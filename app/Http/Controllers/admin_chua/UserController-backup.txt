<?php

// namespace App\Http\Controllers\Admin;

// use App\Http\Controllers\Controller;
// use App\Repositories\Contracts\UserRepositoryInterface;
// use Illuminate\Http\Request;
// use Illuminate\Support\Facades\Hash;

// class UserController extends Controller
// {
//     protected UserRepositoryInterface $userRepository;

//     public function __construct(UserRepositoryInterface $userRepository)
//     {
//         $this->userRepository = $userRepository;
//     }

//     /**
//      * Danh sách người dùng
//      */
//     public function index(Request $request)
//     {
//         $keyword = $request->input('search');
//         $users = $this->userRepository->searchPaginated($keyword, 10);

//         return view('admin.users.index', compact('users', 'keyword'));
//     }

//     /**
//      * Form tạo mới
//      */
//     public function create()
//     {
//         return view('admin.users.create');
//     }

//     /**
//      * Lưu người dùng mới
//      */
//     public function store(Request $request)
//     {
//         $validated = $request->validate([
//             'username' => 'required|string|max:100|unique:users,username',
//             'email' => 'required|email|unique:users,email',
//             'password' => 'required|min:6|confirmed',
//             'role' => 'required|string|max:50',
//         ]);

//         $validated['password'] = Hash::make($validated['password']);

//         $this->userRepository->create($validated);

//         return redirect()->route('admin.users.index')->with('success', 'Thêm người dùng thành công!');
//     }

//     /**
//      * Hiển thị chi tiết người dùng
//      */
//     public function show($id)
//     {
//         $user = $this->userRepository->find($id);
//         if (!$user) {
//             return redirect()->route('admin.users.index')->with('error', 'Người dùng không tồn tại!');
//         }

//         return view('admin.users.show', compact('user'));
//     }

//     /**
//      * Form chỉnh sửa
//      */
//     public function edit($id)
//     {
//         $user = $this->userRepository->find($id);
//         if (!$user) {
//             return redirect()->route('admin.users.index')->with('error', 'Không tìm thấy người dùng!');
//         }

//         return view('admin.users.edit', compact('user'));
//     }

//     /**
//      * Cập nhật người dùng
//      */
//     public function update(Request $request, $id)
//     {
//         $validated = $request->validate([
//             'username' => 'required|string|max:100|unique:users,username,' . $id,
//             'email' => 'required|email|unique:users,email,' . $id,
//             'role' => 'required|string|max:50',
//             'password' => 'nullable|min:6|confirmed',
//         ]);

//         if (!empty($validated['password'])) {
//             $validated['password'] = Hash::make($validated['password']);
//         } else {
//             unset($validated['password']);
//         }

//         $this->userRepository->update($id, $validated);

//         return redirect()->route('admin.users.index')->with('success', 'Cập nhật người dùng thành công!');
//     }

//     /**
//      * Xóa người dùng
//      */
//     public function destroy($id)
//     {
//         $this->userRepository->delete($id);
//         return redirect()->route('admin.users.index')->with('success', 'Xóa người dùng thành công!');
//     }


namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Repositories\Contracts\UserRepositoryInterface;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\DB;  // ← Thêm dòng này
use Illuminate\Support\Facades\Log;
class UserController extends Controller
{
    protected $userRepository;

    public function __construct(UserRepositoryInterface $userRepository)
    {
        $this->userRepository = $userRepository;
    }

    /**
     * Hiển thị danh sách người dùng
     */
    public function index(Request $request)
    {
        $query = User::query();

        // Tìm kiếm
        if ($request->filled('search')) {
            $query->where(function ($q) use ($request) {
                $q->where('username', 'like', '%' . $request->search . '%')
                    ->orWhere('email', 'like', '%' . $request->search . '%');
            });
        }

        // Lọc theo role
        if ($request->filled('role')) {
            $query->where('role', $request->role);
        }

        // ✅ Lọc theo trạng thái (sửa lỗi filled không nhận giá trị 0)
        if (!is_null($request->status) && $request->status !== '') {
            $query->where('is_active', $request->status);
        }
        // Lọc theo trạng thái xác thực email
        if (!is_null($request->verified) && $request->verified !== '') {
            if ($request->verified == '1') {
                $query->whereNotNull('email_verified_at');
            } else {
                $query->whereNull('email_verified_at');
            }
        }

        // Sắp xếp mới nhất trước
        $users = $query->latest()->paginate(15);

        return view('admin.users.index', compact('users'));
    }

    /**
     * Hiển thị form tạo user mới
     */
    public function create()
    {
        return view('admin.users.create');
    }

    /**
     * Lưu user mới
     */
    // public function store(Request $request)
    // {
    //     $validated = $request->validate([
    //         'first_name' => 'required|string|max:50',
    //         'last_name' => 'required|string|max:50',
    //         'username' => 'required|string|max:50|unique:users,username',
    //         'email' => 'required|email|unique:users,email',
    //         'password' => 'required|min:8|confirmed',
    //         'phone' => 'nullable|string|max:20',
    //         'role' => 'required|in:admin,buyer',
    //         'gender' => 'nullable|in:male,female,other',
    //         'birthday' => 'nullable|date',
    //         'bio' => 'nullable|string|max:500',
    //         'is_active' => 'boolean',
    //     ]);

    //     // Hash mật khẩu
    //     $validated['password'] = Hash::make($validated['password']);
    //     $validated['email_verified_at'] = now();
    //     $validated['remember_token'] = Str::random(10);

    //     $this->userRepository->create($validated);

    //     return redirect()
    //         ->route('admin.users.index')
    //         ->with('success', 'Tạo người dùng thành công!');
    // }
    // /**
    //  * Cập nhật user
    //  */
    // public function update(Request $request, $id)
    // {
    //     $user = $this->userRepository->find($id);

    //     if (!$user) {
    //         abort(404);
    //     }

    //     $validated = $request->validate([
    //         'first_name' => 'required|string|max:50',
    //         'last_name' => 'required|string|max:50',
    //         'username' => 'required|string|max:50|unique:users,username,' . $id,
    //         'email' => 'required|email|unique:users,email,' . $id,
    //         'password' => 'nullable|min:8|confirmed',
    //         'phone' => 'nullable|string|max:20',
    //         'role' => 'required|in:admin,buyer',
    //         'gender' => 'nullable|in:male,female,other',
    //         'birthday' => 'nullable|date',
    //         'bio' => 'nullable|string|max:500',
    //         'is_active' => 'boolean',
    //     ]);

    //     // Nếu có mật khẩu mới thì hash lại
    //     if ($request->filled('password')) {
    //         $validated['password'] = Hash::make($validated['password']);
    //     } else {
    //         unset($validated['password']);
    //     }

    //     $this->userRepository->update($id, $validated);

    //     return redirect()
    //         ->route('admin.users.index')
    //         ->with('success', 'Cập nhật người dùng thành công!');
    // }


    public function store(Request $request)
    {
        $validated = $request->validate([
            'username' => 'required|string|max:50|unique:users,username',
            'email' => 'required|email|unique:users,email',
            'password' => 'required|min:8|confirmed',
            'first_name' => 'required|string|max:50',
            'last_name' => 'required|string|max:50',
            'phone' => 'nullable|string|max:20',
            'role' => 'required|in:admin,buyer',
            'gender' => 'nullable|in:male,female,other',
            'birthday' => 'nullable|date',
            'bio' => 'nullable|string|max:500',
            'is_active' => 'boolean',
            'email_verified_at' => 'nullable|date',
            'avatar' => 'nullable|image|mimes:jpg,jpeg,png|max:2048',
        ]);

        // Hash mật khẩu
        $validated['password'] = Hash::make($validated['password']);

        // Nếu admin không chọn ngày xác thực → để NULL
        if (empty($validated['email_verified_at'])) {
            $validated['email_verified_at'] = null;
        }

        // Upload avatar nếu có
        if ($request->hasFile('avatar')) {
            $file = $request->file('avatar');
            $path = $file->store('avatars', 'public');
            $validated['avatar'] = $path;
        }

        $validated['remember_token'] = Str::random(60);

        $this->userRepository->create($validated);

        return redirect()
            ->route('admin.users.index')
            ->with('success', 'Tạo người dùng thành công!');
    }

    public function update(Request $request, $id)
    {
        $user = $this->userRepository->find($id);
        if (!$user)
            abort(404);

        $validated = $request->validate([
            'username' => 'required|string|max:50|unique:users,username,' . $id,
            'email' => 'required|email|unique:users,email,' . $id,
            'password' => 'nullable|min:8|confirmed',
            'first_name' => 'required|string|max:50',
            'last_name' => 'required|string|max:50',
            'phone' => 'nullable|string|max:20',
            'role' => 'required|in:admin,buyer',
            'gender' => 'nullable|in:male,female,other',
            'birthday' => 'nullable|date',
            'bio' => 'nullable|string|max:500',
            'is_active' => 'boolean',
            'email_verified_at' => 'nullable|date',
            'avatar' => 'nullable|image|mimes:jpg,jpeg,png|max:2048',
        ]);

        // Nếu có mật khẩu mới thì hash
        if ($request->filled('password')) {
            $validated['password'] = Hash::make($validated['password']);
        } else {
            unset($validated['password']);
        }

        // Nếu admin không chọn ngày xác thực → để NULL
        if (empty($validated['email_verified_at'])) {
            $validated['email_verified_at'] = null;
        }

        // Upload avatar mới nếu có
        if ($request->hasFile('avatar')) {
            $file = $request->file('avatar');
            $path = $file->store('avatars', 'public');
            $validated['avatar'] = $path;

            // Xoá avatar cũ nếu cần
            if ($user->avatar) {
                \Storage::disk('public')->delete($user->avatar);
            }
        }

        $this->userRepository->update($id, $validated);

        return redirect()
            ->route('admin.users.index')
            ->with('success', 'Cập nhật người dùng thành công!');
    }


    /**
     * Hiển thị chi tiết user
     */
    public function show($id)
    {
        $user = $this->userRepository->find($id);

        if (!$user) {
            abort(404);
        }

        return view('admin.users.show', compact('user'));
    }

    /**
     * Hiển thị form chỉnh sửa
     */
    public function edit($id)
    {
        $user = $this->userRepository->find($id);

        if (!$user) {
            abort(404);
        }

        return view('admin.users.edit', compact('user'));
    }

    /**
     * Cập nhật trạng thái kích hoạt (AJAX)
     */
    public function toggleStatus($id, Request $request)
    {
        try {
            $user = User::findOrFail($id);
            $user->is_active = $request->is_active;
            $user->save();

            return response()->json([
                'success' => true,
                'message' => 'Cập nhật trạng thái thành công!'
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Có lỗi xảy ra: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * Xóa user và tất cả dữ liệu liên quan (XÓA THẬT - FORCE DELETE)
     */
    public function destroy($id)
    {
        \DB::beginTransaction();

        try {
            // Tìm user (bao gồm cả soft deleted)
            $user = User::withTrashed()->findOrFail($id);

            // Không cho xóa chính mình
            if (auth()->check() && $user->id === auth()->id()) {
                \DB::rollBack();
                return redirect()
                    ->route('admin.users.index')
                    ->with('error', 'Bạn không thể xóa chính mình!');
            }

            $username = $user->username;

            \Log::info("Force deleting user: {$username} (ID: {$id})");

            // ==========================================
            // XÓA TẤT CẢ DỮ LIỆU LIÊN QUAN
            // ==========================================

            // 1. Xóa địa chỉ
            $user->addresses()->forceDelete();

            // 2. Xóa đơn hàng và order items
            foreach ($user->orders()->withTrashed()->get() as $order) {
                $order->orderItems()->forceDelete();
                $order->forceDelete();
            }

            // 3. Xóa giỏ hàng
            $user->cartItems()->forceDelete();

            // 4. Xóa wishlist
            $user->wishlists()->forceDelete();

            // 5. Xóa reviews
            $user->reviews()->forceDelete();

            // 6. Xóa notifications
            $user->notifications()->forceDelete();

            // 7. Xóa blogs
            $user->blogs()->forceDelete();

            // 8. Xóa mail recipients
            $user->mailRecipients()->forceDelete();

            // 9. Xóa quan hệ images (detach từ bảng pivot)
            \DB::table('imageables')
                ->where('imageable_type', User::class)
                ->where('imageable_id', $user->id)
                ->delete();

            // 10. XÓA THẬT USER KHỎI DATABASE (không phải soft delete)
            $user->forceDelete();

            \DB::commit();
            \Log::info("User PERMANENTLY deleted: {$username}");

            return redirect()
                ->route('admin.users.index')
                ->with('success', "Đã xóa vĩnh viễn người dùng '{$username}' và tất cả dữ liệu liên quan!");

        } catch (\Exception $e) {
            \DB::rollBack();
            \Log::error("Error force deleting user ID {$id}: " . $e->getMessage());
            \Log::error("File: " . $e->getFile() . " | Line: " . $e->getLine());
            \Log::error("Stack trace: " . $e->getTraceAsString());

            return redirect()
                ->route('admin.users.index')
                ->with('error', 'Có lỗi xảy ra khi xóa người dùng: ' . $e->getMessage());
        }
    }


    // Hiển thị danh sách user đã xoá
    public function trashed()
    {
        $users = User::onlyTrashed()->latest()->paginate(15);
        return view('admin.users.trashed', compact('users'));
    }

    // Khôi phục user
    public function restore($id)
    {
        $user = User::onlyTrashed()->findOrFail($id);
        $user->restore();

        return redirect()
            ->route('admin.users.trashed')
            ->with('success', "Đã khôi phục người dùng '{$user->username}' thành công!");
    }

    // Xoá vĩnh viễn từ trashed
    public function forceDelete($id)
    {
        $user = User::onlyTrashed()->findOrFail($id);

        // Xoá liên quan như cũ
        $user->forceDelete();

        return redirect()
            ->route('admin.users.trashed')
            ->with('success', "Đã xoá vĩnh viễn người dùng '{$user->username}'!");
    }
}