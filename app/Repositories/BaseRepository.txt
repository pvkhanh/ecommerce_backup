<?php
namespace App\Repositories;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\Collection;

abstract class BaseRepository
{
    protected Model $model;

    public function __construct()
    {
        $this->makeModel();
    }

    abstract protected function model(): string;

    protected function makeModel(): void
    {
        $model = app($this->model());
        if (!$model instanceof Model) {
            throw new \RuntimeException("{$this->model()} must be an Eloquent model");
        }
        $this->model = $model;
    }

    public function newQuery(): Builder
    {
        return $this->model->newQuery();
    }

    public function find(int $id): ?Model
    {
        return $this->model->find($id);
    }

    public function findOrFail(int $id): Model
    {
        return $this->model->findOrFail($id);
    }

    public function create(array $data): Model
    {
        return $this->model->create($data);
    }

    public function update(int $id, array $data): bool
    {
        $m = $this->find($id);
        return $m ? $m->update($data) : false;
    }

    public function delete(int $id): bool
    {
        $m = $this->find($id);
        return $m ? (bool) $m->delete() : false;
    }

    public function paginateQuery(Builder $query, int $perPage = 15, array $columns = ['*']): LengthAwarePaginator
    {
        return $query->paginate($perPage, $columns);
    }

    public function allQuery(Builder $query, array $columns = ['*']): Collection
    {
        return $query->get($columns);
    }

    public function getModel(): Model
    {
        return $this->model;
    }
    public function forceDelete(int $id): bool
    {
        $m = $this->find($id);
        return $m ? (bool) $m->forceDelete() : false;
    }
    public function firstBy(string $column, $value): ?Model
    {
        return $this->newQuery()->where($column, $value)->first();
    }
    public function existsBy(string $column, $value): bool
    {
        return $this->newQuery()->where($column, $value)->exists();
    }

}
